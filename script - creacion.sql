use GD2C2017
go

/*Se eliminan objetos existentes*/

IF OBJECT_ID('POLACA_INVERSA.ROL_ACCESOS','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.ROL_ACCESOS;

IF OBJECT_ID('POLACA_INVERSA.ACCESOS','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.ACCESOS;

IF OBJECT_ID('POLACA_INVERSA.ROL_USUARIO','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.ROL_USUARIO;

IF OBJECT_ID('POLACA_INVERSA.ROLES','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.ROLES;

IF OBJECT_ID('POLACA_INVERSA.SUCURSAL_USUARIO','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.SUCURSAL_USUARIO;

IF OBJECT_ID('POLACA_INVERSA.USUARIOS','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.USUARIOS;

IF OBJECT_ID('POLACA_INVERSA.DEVOLUCIONES','U') IS NOT NULL
	DROP TABLE POLACA_INVERSA.DEVOLUCIONES;

IF OBJECT_ID('POLACA_INVERSA.FACTURAS_RENDIDAS','U') IS NOT NULL
	DROP TABLE POLACA_INVERSA.FACTURAS_RENDIDAS;
	
IF OBJECT_ID('POLACA_INVERSA.ITEMS_FACTURAS','U') IS NOT NULL
	DROP TABLE POLACA_INVERSA.ITEMS_FACTURAS;

IF OBJECT_ID('POLACA_INVERSA.ITEMS_PAGOS','U') IS NOT NULL
	DROP TABLE POLACA_INVERSA.ITEMS_PAGOS;
	
IF OBJECT_ID('POLACA_INVERSA.FACTURAS','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.FACTURAS;

IF OBJECT_ID('POLACA_INVERSA.PAGOS','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.PAGOS;

IF OBJECT_ID('POLACA_INVERSA.SUCURSALES','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.SUCURSALES;
	
IF OBJECT_ID('POLACA_INVERSA.EMPRESAS','U') IS NOT NULL
	DROP TABLE POLACA_INVERSA.EMPRESAS;
	
IF OBJECT_ID('POLACA_INVERSA.RUBRO','U') IS NOT NULL
	DROP TABLE POLACA_INVERSA.RUBRO;

IF OBJECT_ID('POLACA_INVERSA.CLIENTES','U') IS NOT NULL
    DROP TABLE POLACA_INVERSA.CLIENTES;

IF OBJECT_ID('POLACA_INVERSA.SPLOGIN') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.SPLOGIN;

IF OBJECT_ID('POLACA_INVERSA._INHABILITAR') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA._INHABILITAR;	
	
IF OBJECT_ID('POLACA_INVERSA._HABILITAR') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA._HABILITAR;

IF OBJECT_ID('POLACA_INVERSA.CLIENTE_UPDATE') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.CLIENTE_UPDATE;	

IF OBJECT_ID('POLACA_INVERSA.CLIENTE_NUEVO') IS NOT NULL
	DROP PROCEDURE POLACA_INVERSA.CLIENTE_NUEVO;
	
IF OBJECT_ID('POLACA_INVERSA.USUARIO_GET_ID') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.USUARIO_GET_ID;
	
IF OBJECT_ID('POLACA_INVERSA.ROL_UPDATE') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.ROL_UPDATE;

IF OBJECT_ID('POLACA_INVERSA.ROL_NUEVO') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.ROL_NUEVO;	

IF OBJECT_ID('POLACA_INVERSA.ROL_INHABILITAR') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.ROL_INHABILITAR;
	
IF OBJECT_ID('POLACA_INVERSA.USUARIO_GET_ROLES') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.USUARIO_GET_ROLES;

IF OBJECT_ID('POLACA_INVERSA.USUARIO_GET_SUCURSALES') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.USUARIO_GET_SUCURSALES;
	
IF OBJECT_ID('POLACA_INVERSA.ROL_GET_ACCESOS') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.ROL_GET_ACCESOS;

IF OBJECT_ID('POLACA_INVERSA.ACCESO_GET_NOMBRE') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.ACCESO_GET_NOMBRE;	

IF OBJECT_ID('POLACA_INVERSA.GET_CLIENTES_CON_FILTROS') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.GET_CLIENTES_CON_FILTROS;

IF OBJECT_ID('POLACA_INVERSA.FUNCIONALIDADES_GET_TABLA_DE_ROL') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.FUNCIONALIDADES_GET_TABLA_DE_ROL;	

IF OBJECT_ID('POLACA_INVERSA.FUNCIONALIDADES_GET_TABLA_DE_ROL_DISPONIBLES') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.FUNCIONALIDADES_GET_TABLA_DE_ROL_DISPONIBLES;	

IF OBJECT_ID('POLACA_INVERSA.GET_EMPRESAS_CON_FILTROS') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.GET_EMPRESAS_CON_FILTROS;	

IF OBJECT_ID('POLACA_INVERSA.GET_FACTURAS_CON_FILTROS') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.GET_FACTURAS_CON_FILTROS;

IF OBJECT_ID('POLACA_INVERSA.FACTURA_ESTACOBRADA') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.FACTURA_ESTACOBRADA;

IF OBJECT_ID('POLACA_INVERSA.FACTURA_GET_DETALLE') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.FACTURA_GET_DETALLE;

IF OBJECT_ID('POLACA_INVERSA.GET_SUCURSAL_CON_FILTROS') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.GET_SUCURSAL_CON_FILTROS;

IF OBJECT_ID('POLACA_INVERSA.SUCURSAL_ESTA_HABILITADA') IS NOT NULL
    DROP FUNCTION POLACA_INVERSA.SUCURSAL_ESTA_HABILITADA;
	
IF OBJECT_ID('POLACA_INVERSA.SUCURSAL_UPDATE') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.SUCURSAL_UPDATE;
	
IF OBJECT_ID('POLACA_INVERSA.EMPRESA_UPDATE') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.EMPRESA_UPDATE;

IF OBJECT_ID('POLACA_INVERSA.EMPRESA_NUEVA') IS NOT NULL
	DROP PROCEDURE POLACA_INVERSA.EMPRESA_NUEVA;
	
IF OBJECT_ID('POLACA_INVERSA.HABILITAR_EMPRESA') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.HABILITAR_EMPRESA;
	
IF OBJECT_ID('POLACA_INVERSA.INHABILITAR_EMPRESA') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.INHABILITAR_EMPRESA;

IF OBJECT_ID('POLACA_INVERSA.FACTURA_NUEVA') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.FACTURA_NUEVA;

IF OBJECT_ID('POLACA_INVERSA.DETALLE_FACTURA_NUEVO') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.DETALLE_FACTURA_NUEVO;

IF OBJECT_ID('POLACA_INVERSA.FACTURA_UPDATE') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.FACTURA_UPDATE;

IF OBJECT_ID('POLACA_INVERSA.SUCURSAL_NUEVO') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.SUCURSAL_NUEVO;

IF OBJECT_ID('POLACA_INVERSA.INHABILITAR_SUCURSAL') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.INHABILITAR_SUCURSAL;
	
IF OBJECT_ID('POLACA_INVERSA.HABILITAR_SUCURSAL') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.HABILITAR_SUCURSAL;

IF OBJECT_ID('POLACA_INVERSA.MigrarClientes') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.MigrarClientes;
	
IF OBJECT_ID('POLACA_INVERSA.MigrarRubros') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.MigrarRubros;
	
IF OBJECT_ID('POLACA_INVERSA.MigrarEmpresas') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.MigrarEmpresas;
	
IF OBJECT_ID('POLACA_INVERSA.MigrarItemFactura') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.MigrarItemFactura;

IF OBJECT_ID('POLACA_INVERSA.MigrarFactura') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.MigrarFactura;
	
IF OBJECT_ID('POLACA_INVERSA.MigrarSucursales') IS NOT NULL
    DROP PROCEDURE POLACA_INVERSA.MigrarSucursales;	

IF TYPE_ID(N'POLACA_INVERSA.TABLA_ROL_X_ACCESO') IS NOT NULL
	DROP TYPE POLACA_INVERSA.TABLA_ROL_X_ACCESO;
	
IF TYPE_ID(N'POLACA_INVERSA.TABLA_ITEMS_FACTURA') IS NOT NULL
	DROP TYPE POLACA_INVERSA.TABLA_ITEMS_FACTURA;
	
IF EXISTS (SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'POLACA_INVERSA')
    DROP SCHEMA POLACA_INVERSA
GO
	
/*CREO NUEVO ESQUEMA */

IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'POLACA_INVERSA')
  BEGIN
    EXEC ('CREATE SCHEMA POLACA_INVERSA;');
  END;

/*CREO LA TABLA DE USUARIOS */

CREATE TABLE [POLACA_INVERSA].USUARIOS(
	ID_USUARIO INT PRIMARY KEY IDENTITY(1,1),
	USERNAME NVARCHAR(20) UNIQUE NOT NULL,
	PASSWORD VARBINARY(250) NOT NULL,
	HABILITADO BIT NOT NULL,
	INTENTOS TINYINT NOT NULL
);
GO
/*CREO LA TABLA DE ROLES */
CREATE TABLE [POLACA_INVERSA].ROLES (
	ID_ROL TINYINT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE_ROL VARCHAR(250) UNIQUE,
	HABILITADO BIT NOT NULL
);
GO
/*CREO LA TABLA DE ROLES POR USUARIO*/
CREATE TABLE [POLACA_INVERSA].ROL_USUARIO (
	ID_USUARIO INT FOREIGN KEY REFERENCES POLACA_INVERSA.USUARIOS(Id_Usuario),
	ID_ROL TINYINT FOREIGN KEY REFERENCES POLACA_INVERSA.ROLES(Id_Rol),
	PRIMARY KEY(ID_USUARIO,ID_ROL)
);
GO
/*CREO LA TABLA DE ACCESOS*/
CREATE TABLE [POLACA_INVERSA].ACCESOS (
	ID_ACCESO TINYINT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE VARCHAR(100) UNIQUE,
);
GO
/*CREO LA TABLA DE ROL POR ACCESOS*/
CREATE TABLE [POLACA_INVERSA].ROL_ACCESOS (
	ID_ROL TINYINT FOREIGN KEY REFERENCES POLACA_INVERSA.ROLES(Id_Rol),
	ID_ACCESO TINYINT FOREIGN KEY REFERENCES POLACA_INVERSA.ACCESOS(Id_Acceso),
	PRIMARY KEY (ID_ROL,ID_ACCESO)
);
GO
/*CREO LA TABLA RUBRO*/
CREATE TABLE [POLACA_INVERSA].RUBRO(
	ID_RUBRO INT PRIMARY KEY,
	DETALLE VARCHAR(250) NOT NULL,
)
GO
/*CREO LA TABLA DE EMPRESAS*/
CREATE TABLE [POLACA_INVERSA].EMPRESAS(
	ID_EMPRESA INT PRIMARY KEY IDENTITY(1,1),
	CUIT VARCHAR(50) UNIQUE NOT NULL,
	ID_RUBRO INT FOREIGN KEY REFERENCES [POLACA_INVERSA].RUBRO(ID_RUBRO),
	NOMBRE VARCHAR(250) NOT NULL,
	DIRECCION VARCHAR(250) NOT NULL,
	ESTADO_EMPRESA BIT NOT NULL Default 1,
)
GO
/*CREO LA TABLA DE CLIENTES*/
CREATE TABLE [POLACA_INVERSA].CLIENTES (
	ID_CLIENTE INT PRIMARY KEY IDENTITY(1,1),
	DNI VARCHAR(20) UNIQUE NOT NULL,
	NOMBRE VARCHAR(250) NOT NULL,
	APELLIDO VARCHAR(250) NOT NULL,
	MAIL VARCHAR(100) NOT NULL,
	TELEFONO VARCHAR(20) NOT NULL DEFAULT '0',
	DIRECCION VARCHAR(100) NOT NULL,
	CODIGO_POSTAL INT NOT NULL,
	FECHA_NACIMIENTO DATE NOT NULL,
	HABILITADO BIT NOT NULL Default 1
);
GO
/*CREO LA TABLA DE FACTURAS */
CREATE TABLE [POLACA_INVERSA].FACTURAS (
	ID_FACTURA NUMERIC(18,0) PRIMARY KEY,
	ID_EMPRESA INT NOT NULL FOREIGN KEY REFERENCES POLACA_INVERSA.EMPRESAS(ID_EMPRESA),
	ID_CLIENTE INT NOT NULL FOREIGN KEY REFERENCES POLACA_INVERSA.CLIENTES(ID_CLIENTE),
	ID_PAGO INT,
	--FECHA_RENDICION DATE, No veo mucho sentido a este campo.
	ID_DEVOLUCION INT,
	FECHA_ALTA DATE,
	FECHA_VENCIMIENTO DATE,
	TOTAL NUMERIC(18,2)
);
GO
/*CREO LA TABLA DE SUCURSALES*/
CREATE TABLE [POLACA_INVERSA].SUCURSALES (
	ID_SUCURSAL INT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE VARCHAR(250) NOT NULL,
	DIRECCION VARCHAR(250) NOT NULL,
	CODIGO_POSTAL INT UNIQUE NOT NULL,
	ESTADO_SUCURSAL BIT NOT NULL
);
GO
/*CREO LA TABLA DE PAGOS */
CREATE TABLE [POLACA_INVERSA].PAGOS (
	ID_PAGO INT PRIMARY KEY,
	ID_SUCURSAL INT NOT NULL FOREIGN KEY REFERENCES POLACA_INVERSA.SUCURSALES(ID_SUCURSAL),
	ID_CLIENTE INT NOT NULL FOREIGN KEY REFERENCES POLACA_INVERSA.CLIENTES(ID_CLIENTE),
	MEDIO_PAGO VARCHAR(20) NOT NULL,
	FECHA_PAGO DATE NOT NULL,
	TOTAL_PAGO INT NOT NULL
);
GO
/*ITEM DE PAGO*/
CREATE TABLE [POLACA_INVERSA].ITEMS_PAGOS (
	ID_PAGO INTEGER NOT NULL FOREIGN KEY REFERENCES POLACA_INVERSA.PAGOS(ID_PAGO),
	ID_FACTURA NUMERIC(18,0) NOT NULL FOREIGN KEY REFERENCES POLACA_INVERSA.FACTURAS(ID_FACTURA)
);
GO
/*CREO LA TABLA DE SUCURSAL POR USUARIO*/
CREATE TABLE [POLACA_INVERSA].SUCURSAL_USUARIO (
	ID_USUARIO INT FOREIGN KEY REFERENCES [POLACA_INVERSA].USUARIOS(ID_USUARIO),
	ID_SUCURSAL INT FOREIGN KEY REFERENCES [POLACA_INVERSA].SUCURSALES(ID_SUCURSAL),
	PRIMARY KEY(ID_USUARIO,ID_SUCURSAL),
);
GO
/*CREO LA TABLA DE DEVOLUCIONES*/
CREATE TABLE [POLACA_INVERSA].DEVOLUCIONES(
	ID_DEVOLUCIONES INT PRIMARY KEY IDENTITY(1,1),
	ID_FACTURA NUMERIC(18,0) FOREIGN KEY REFERENCES [POLACA_INVERSA].FACTURAS(ID_FACTURA),
	MOTIVO_DEVOLUCION VARCHAR(250),
)
GO
/*CREO LA TABLA DE ITEMS_FACTURA*/
CREATE TABLE [POLACA_INVERSA].ITEMS_FACTURAS(
	ID_ITEM INT IDENTITY PRIMARY KEY,
	ID_FACTURA NUMERIC(18,0) FOREIGN KEY REFERENCES POLACA_INVERSA.FACTURAS(ID_FACTURA),
	CANTIDAD INT,
	MONTO FLOAT,
)
GO
CREATE TABLE [POLACA_INVERSA].FACTURAS_RENDIDAS(
	FEC_RENDICION DATE,
	CUIT VARCHAR(50),--TODO VER RELACIONES ENTRE FACTURAS RENDIDAS, DEVOLUCIONES Y FACTURAS
	ID_FACTURAS NUMERIC(18,0) FOREIGN KEY REFERENCES [POLACA_INVERSA].FACTURAS(ID_FACTURA),
	CANT_FAC_REND INT,
	TOTAL_RENDICION INT,
	IMPORTE_COMISION FLOAT,
	PORCENTAJE_COMISION FLOAT,
	TOTAL FLOAT,
	PRIMARY KEY(FEC_RENDICION,CUIT),	
)
GO
/* CREO LAS PRIMARY KEY COMPUESTAS  
alter table [POLACA_INVERSA].ROL_USUARIO add constraint PK_ROL_USUARIO
	primary key clustered (ID_USUARIO,ID_ROL);
GO
alter table [POLACA_INVERSA].ROL_ACCESOS add constraint PK_ROL_ACCESOS
	primary key clustered (ID_ROL,ID_ACCESO);
GO
alter table [POLACA_INVERSA].SUCURSAL_USUARIO add constraint PK_SUCURSAL_USUARIO
	primary key clustered (ID_USUARIO,ID_SUCURSAL);
GO*/

/*CREO LAS FOREIGN KEY*/
alter table [POLACA_INVERSA].FACTURAS add constraint FK_FACTURA_PAGADA
	foreign key (ID_PAGO) references [POLACA_INVERSA].PAGOS (ID_PAGO);
go
/*
alter table [POLACA_INVERSA].ROL_ACCESOS add constraint FK1_ROL_ACCESOS
	foreign key (ID_ROL) references [POLACA_INVERSA].ROLES (ID_ROL);
GO
alter table [POLACA_INVERSA].ROL_ACCESOS add constraint FK2_ROL_ACCESOS
	foreign key (ID_ACCESO) references [POLACA_INVERSA].ACCESOS (ID_ACCESO);
GO	
alter table [POLACA_INVERSA].ROL_USUARIO add constraint FK1_ROL_USUARIO
	foreign key (ID_ROL) references [POLACA_INVERSA].ROLES (ID_ROL);
GO	
alter table [POLACA_INVERSA].ROL_USUARIO add constraint FK2_ROL_USUARIO
	foreign key (ID_USUARIO) references [POLACA_INVERSA].USUARIOS (ID_USUARIO);
GO
alter table [POLACA_INVERSA].SUCURSAL_USUARIO add constraint FK1_SUCURSAL_USUARIO
	foreign key (ID_USUARIO) references [POLACA_INVERSA].USUARIOS (ID_USUARIO);
GO
alter table [POLACA_INVERSA].SUCURSAL_USUARIO add constraint FK2_SUCURSAL_USUARIO
	foreign key (ID_SUCURSAL) references [POLACA_INVERSA].SUCURSALES (ID_SUCURSAL);*/

--Index

CREATE INDEX Indice_Facturas ON POLACA_INVERSA.FACTURAS(ID_FACTURA)
go
	
-- Funciones

CREATE FUNCTION POLACA_INVERSA.USUARIO_GET_ID(@usuario VARCHAR(20)) RETURNS INT AS
BEGIN
	RETURN	(SELECT id_usuario
			FROM POLACA_INVERSA.Usuarios
			WHERE username = @usuario)
END
GO

CREATE FUNCTION POLACA_INVERSA.USUARIO_GET_ROLES(@usuarioId int) RETURNS TABLE
AS
	RETURN	(SELECT nombre_rol AS Nombre, R.ID_ROL, habilitado AS Habilitado
				FROM POLACA_INVERSA.ROLES as R
					JOIN POLACA_INVERSA.ROL_USUARIO as R_U ON  R_U.ID_ROL= R.ID_ROL
				WHERE R_U.ID_USUARIO = @usuarioId)
GO

CREATE FUNCTION POLACA_INVERSA.USUARIO_GET_SUCURSALES(@usuarioId int) RETURNS TABLE
AS
	RETURN	(SELECT S.ID_SUCURSAL, S.Codigo_Postal, S.Direccion, S.Nombre, S.ESTADO_SUCURSAL AS Habilitado
				FROM POLACA_INVERSA.SUCURSAL_USUARIO as S_U
					JOIN POLACA_INVERSA.SUCURSALES as S ON  S_U.ID_SUCURSAL= S.ID_SUCURSAL
				WHERE S_U.ID_USUARIO = @usuarioId)
GO

CREATE FUNCTION POLACA_INVERSA.ROL_GET_ACCESOS(@rolId TINYINT) RETURNS TABLE
AS
	RETURN	(	SELECT Id_Acceso
				FROM POLACA_INVERSA.ROL_ACCESOS
				WHERE ID_ROL = @rolId)
GO

CREATE FUNCTION POLACA_INVERSA.ACCESO_GET_NOMBRE(@accesoId TINYINT) RETURNS varchar(200)
AS
BEGIN
	RETURN	(	SELECT Nombre
				FROM POLACA_INVERSA.ACCESOS
				WHERE id_acceso = @accesoId)
END
GO

CREATE FUNCTION POLACA_INVERSA.GET_CLIENTES_CON_FILTROS (@nombre varchar(255),			
														 @apellido varchar(255),
														 @dni numeric(18,0))
RETURNS TABLE
AS 
	RETURN	(SELECT  ID_CLIENTE,
					 APELLIDO as Apellido,
					 NOMBRE as Nombre,
					 DNI as DNI,
					 MAIL as Mail,
					 TELEFONO as Telefono,
					 DIRECCION as Domicilio,
					 CODIGO_POSTAL as "Codigo Postal",
					 FECHA_NACIMIENTO as "Fecha Nacimiento",
					 HABILITADO
			FROM POLACA_INVERSA.CLIENTES
			WHERE (@nombre = '' OR CHARINDEX(@nombre, NOMBRE) > 0) AND
				(@apellido = '' OR CHARINDEX(@apellido, APELLIDO) > 0) AND
				(@dni = 0 OR @dni = DNI))
GO

CREATE FUNCTION POLACA_INVERSA.FUNCIONALIDADES_GET_TABLA_DE_ROL (@Id_Rol TINYINT)
RETURNS TABLE
AS
	RETURN (SELECT A.ID_ACCESO as Id_Acceso, NOMBRE as Nombre
			FROM POLACA_INVERSA.ROL_ACCESOS as R_A
			JOIN POLACA_INVERSA.ACCESOS as A on R_A.ID_ACCESO = A.ID_ACCESO
			where R_A.ID_ROL=@Id_Rol)
GO

CREATE FUNCTION POLACA_INVERSA.FUNCIONALIDADES_GET_TABLA_DE_ROL_DISPONIBLES (@Id_Rol TINYINT)
RETURNS TABLE
AS
	RETURN (SELECT ID_ACCESO as Id_Acceso, NOMBRE as Nombre
	FROM POLACA_INVERSA.ACCESOS
	where ID_ACCESO NOT IN (SELECT A.ID_ACCESO as Id_Acceso
							FROM POLACA_INVERSA.ROL_ACCESOS as R_A
							JOIN POLACA_INVERSA.ACCESOS as A on R_A.ID_ACCESO = A.ID_ACCESO
							where R_A.ID_ROL=@Id_Rol))
GO

CREATE FUNCTION POLACA_INVERSA.GET_EMPRESAS_CON_FILTROS(@nombre varchar(250),
														@cuit numeric(18,0),
														@rubro varchar(250))
RETURNS TABLE
AS
	RETURN (SELECT 	ID_EMPRESA,
					Cuit,
					Nombre,
					Direccion,
					R.DETALLE as Rubro,
					ESTADO_EMPRESA
			FROM POLACA_INVERSA.EMPRESAS as E
				JOIN POLACA_INVERSA.RUBRO as R ON E.ID_RUBRO = R.ID_RUBRO
			WHERE (@nombre = '' OR CHARINDEX(@nombre, NOMBRE) > 0) AND
				(@cuit = 0 OR @cuit = CUIT) AND
				(@rubro = '' OR R.DETALLE = @rubro))

GO

CREATE FUNCTION POLACA_INVERSA.GET_FACTURAS_CON_FILTROS(@numFactura int,
														@dniCliente numeric(18,0),
														@cuitEmpresa numeric(18,0),
														@total numeric(18,2))
RETURNS TABLE
AS
	RETURN (SELECT 	f.ID_FACTURA,
					e.NOMBRE as 'Nombre Empresa',
					e.CUIT as 'Cuit Empresa',
					c.NOMBRE as 'Nombre Cliente',
					c.DNI,
					f.FECHA_ALTA as 'Fecha Alta',
					f.FECHA_VENCIMIENTO as 'Fecha Vencimiento',
					f.TOTAL as Total
			FROM POLACA_INVERSA.FACTURAS as f
				JOIN POLACA_INVERSA.EMPRESAS as e ON f.ID_EMPRESA = e.ID_EMPRESA
				JOIN POLACA_INVERSA.CLIENTES as c ON f.ID_CLIENTE = c.ID_CLIENTE
			WHERE 	(@numFactura = 0 OR f.ID_FACTURA = @numFactura) AND
					(@dniCliente = 0 OR c.DNI = @dniCliente) AND
					(@cuitEmpresa = 0 OR e.CUIT = @cuitEmpresa) AND
					(@total = 0 OR f.TOTAL = @total))
GO

CREATE FUNCTION POLACA_INVERSA.FACTURA_ESTACOBRADA(@idFactura int)
RETURNS bit
AS
BEGIN
	RETURN (SELECT CASE ISNULL(ID_PAGO,0)
				when 0 then 0 else 1 end
FROM POLACA_INVERSA.FACTURAS
where ID_FACTURA = @idFactura)
END
GO

CREATE FUNCTION POLACA_INVERSA.FACTURA_GET_DETALLE( @idFactura NUMERIC(18,0))
RETURNS TABLE
AS
	RETURN (SELECT Cantidad, Monto
			FROM POLACA_INVERSA.ITEMS_FACTURAS
			WHERE ID_FACTURA = @idFactura)
	
GO

CREATE FUNCTION POLACA_INVERSA.GET_SUCURSAL_CON_FILTROS(@nombre varchar(250),
											  @direccion varchar(250),
											  @codigoPostal numeric(18,0))
RETURNS TABLE
AS
	RETURN (SELECT 	ID_SUCURSAL,
					Nombre,
					Direccion,
					Codigo_Postal,
					Estado_Sucursal as 'Habilitado'
			FROM POLACA_INVERSA.SUCURSALES
			WHERE (@nombre = '' OR CHARINDEX(@nombre, NOMBRE) > 0) AND
				  (@direccion = '' OR CHARINDEX(@direccion, DIRECCION) > 0) AND
				  (@codigoPostal = 0 OR @codigoPostal = CODIGO_POSTAL))
GO

CREATE FUNCTION POLACA_INVERSA.SUCURSAL_ESTA_HABILITADA(@id int)
RETURNS bit
AS
BEGIN
	RETURN (SELECT ESTADO_SUCURSAL
			FROM POLACA_INVERSA.SUCURSALES
			where ID_SUCURSAL = @id)
END
GO

-- Fin de Funciones
	
-- Procedimientos

CREATE PROC POLACA_INVERSA.SPLOGIN
	@usuario varchar(20),
	@contrasenia varbinary(256)
AS
BEGIN

	DECLARE @pass varbinary(256), @intentos TINYINT, @habilitado BIT

	SELECT @pass=password, @intentos=intentos, @habilitado = habilitado
	FROM POLACA_INVERSA.USUARIOS
	WHERE username = @usuario

	IF (@pass IS NULL) 
	BEGIN
		RAISERROR ('Usuario inexistente!', 16, 1)
		RETURN
	END

	IF (@habilitado = 0) 
	BEGIN
		RAISERROR ('Usuario inhabilitado!', 16, 1)
		RETURN
	END

	IF (@pass <> @contrasenia) 
	BEGIN
		UPDATE POLACA_INVERSA.USUARIOS SET intentos = @intentos + 1
		WHERE username = @usuario
		DECLARE @error varchar(100)= 'Contrasenia Incorrecta! Intentos restantes: ' + str(2 - @intentos)
		RAISERROR (@error, 16, 1)

		IF(@intentos = 2)
		BEGIN
			UPDATE POLACA_INVERSA.USUARIOS SET habilitado = 0
			WHERE username = @usuario
		END
		RETURN
	END

	UPDATE POLACA_INVERSA.USUARIOS SET intentos = 0
	WHERE username = @usuario

END
GO

CREATE PROC POLACA_INVERSA._INHABILITAR 
@id int
AS
BEGIN
	UPDATE POLACA_INVERSA.CLIENTES SET HABILITADO=0 where ID_CLIENTE=@id 
END
GO

CREATE PROC POLACA_INVERSA._HABILITAR 
@id int
AS
BEGIN
	UPDATE POLACA_INVERSA.CLIENTES SET HABILITADO=1 where ID_CLIENTE=@id 
END
GO

CREATE PROC POLACA_INVERSA.CLIENTE_UPDATE(	@id INT,
											@nombre VARCHAR(255),
											@apellido VARCHAR(255),
											@dni NUMERIC(18,0),
											@mail VARCHAR(255),
											@telefono NUMERIC(18,0),
											@domicilio VARCHAR(255),
											@fechaNac DATE,
											@codigoPostal NUMERIC(18,0),
											@habilitado BIT)
AS
BEGIN
		
	UPDATE POLACA_INVERSA.CLIENTES SET	HABILITADO = @habilitado,
										CODIGO_POSTAL = @codigoPostal,
										NOMBRE = @nombre, 
										APELLIDO = @apellido,
										DNI = @dni,
										FECHA_NACIMIENTO = @fechaNac,
										MAIL = @mail,
										TELEFONO = @telefono,
										DIRECCION = @domicilio
	WHERE ID_CLIENTE = @id
END
GO

CREATE PROC POLACA_INVERSA.CLIENTE_NUEVO(	@nombre VARCHAR(255),
											@apellido VARCHAR(255),
											@dni NUMERIC(18,0),
											@mail VARCHAR(255),
											@telefono NUMERIC(18,0),
											@domicilio VARCHAR(255),
											@fechaNac DATE,
											@codigoPostal NUMERIC(18,0),
											@habilitado BIT)
AS
BEGIN
		
	INSERT INTO POLACA_INVERSA.CLIENTES VALUES (@dni,
												@nombre, 
												@apellido,
												@mail,
												@telefono,
												@domicilio,
												@codigoPostal,
												@fechaNac,
												@habilitado)
END
GO

CREATE TYPE POLACA_INVERSA.TABLA_ROL_X_ACCESO AS TABLE(
    idAcceso TINYINT,
	nombre VARCHAR(255)
	--habilitado BIT
)
GO

CREATE PROC POLACA_INVERSA.ROL_INHABILITAR(@rol TINYINT) AS
BEGIN
	DELETE POLACA_INVERSA.ROL_USUARIO 
	WHERE ID_ROL = @rol AND ID_USUARIO <> 1

	UPDATE POLACA_INVERSA.Rol SET HABILITADO = 0
	WHERE ID_ROL = @rol
END
GO

CREATE PROC POLACA_INVERSA.ROL_UPDATE(	@id TINYINT,
										@nombre VARCHAR(200),
										@funcionalidades TABLA_ROL_X_ACCESO READONLY,
										@habilitado BIT)
AS
BEGIN
	IF (@habilitado = 0)
	BEGIN
		EXEC POLACA_INVERSA.ROL_INHABILITAR @id
	END

	UPDATE POLACA_INVERSA.ROLES SET	NOMBRE_ROL = @nombre,
									HABILITADO = @habilitado
	
	WHERE ID_ROL = @id

	DELETE POLACA_INVERSA.ROL_ACCESOS
	WHERE ID_ROL = @id

	INSERT POLACA_INVERSA.ROL_ACCESOS
		SELECT @id, idAcceso
		FROM @funcionalidades
		--WHERE habilitado = 1
END
GO

CREATE PROC POLACA_INVERSA.ROL_NUEVO(	@nombre VARCHAR(200),
										@funcionalidades TABLA_ROL_X_ACCESO READONLY,
										@habilitado BIT)
AS
BEGIN
	INSERT POLACA_INVERSA.ROLES VALUES
		(@nombre, @habilitado)

	DECLARE @rol TINYINT = SCOPE_IDENTITY()

	INSERT POLACA_INVERSA.ROL_ACCESOS
		SELECT @rol, idAcceso
		FROM @funcionalidades
		--WHERE habilitado = 1
END
GO

CREATE PROC POLACA_INVERSA.EMPRESA_UPDATE(	@id INT,
											@nombre varchar(200),
											@cuit numeric(18),
											@direccion varchar(250),
											@rubro varchar(250),
											@habilitado BIT)
AS
BEGIN
	IF (@habilitado = 0)
	BEGIN
		EXEC POLACA_INVERSA.INHABILITAR_EMPRESA @id
	END
	
	UPDATE POLACA_INVERSA.EMPRESAS SET	CUIT = @cuit,
									ID_RUBRO = (SELECT ID_RUBRO FROM RUBRO WHERE DETALLE = @rubro),
									NOMBRE = @nombre,
									DIRECCION = @direccion,
									ESTADO_EMPRESA = @habilitado
	WHERE ID_EMPRESA = @id

END
GO

CREATE PROC POLACA_INVERSA.EMPRESA_NUEVA(	@nombre VARCHAR(255),
											@cuit NUMERIC(18,0),
											@direccion VARCHAR(255),
											@rubro VARCHAR(250),
											@habilitado BIT)
AS
BEGIN
		
	INSERT INTO POLACA_INVERSA.EMPRESAS (NOMBRE,CUIT,DIRECCION,ID_RUBRO,ESTADO_EMPRESA)
	VALUES (@nombre, 
			@cuit, 
			@direccion, 
			(SELECT ID_RUBRO FROM RUBRO WHERE DETALLE = @rubro), 
			@habilitado)
END
GO

CREATE PROC POLACA_INVERSA.INHABILITAR_EMPRESA(	@id int)
AS
BEGIN
	--Ajustar Factura debe ir id en ves de cuit
	--IF EXISTS (SELECT * FROM POLACA_INVERSA.FACTURAS WHERE ID_EMPRESA=@ID AND (ID_PAGO IS NOT NULL) AND (ID_RENDICION IS NOT NULL))
		UPDATE POLACA_INVERSA.EMPRESAS SET ESTADO_EMPRESA=0 WHERE ID_EMPRESA=@id
	--ELSE
		RAISERROR ('Error en baja, Factura Pendiente de Cobro y/o Rendicion', 16, 1)
END
GO

CREATE PROC POLACA_INVERSA.HABILITAR_EMPRESA (@id int)
AS
BEGIN
	UPDATE POLACA_INVERSA.EMPRESAS SET ESTADO_EMPRESA=1 WHERE ID_EMPRESA = @id
END
GO

CREATE PROC POLACA_INVERSA.FACTURA_NUEVA(	@numeroFactura NUMERIC(18,0),
											@idEmpresa NUMERIC(18,0),
											@dniCliente NUMERIC(18,0),
											@fechaAlta DATE,
											@fechaVencimiento DATE)
AS
BEGIN
		
	INSERT INTO POLACA_INVERSA.FACTURAS (ID_FACTURA,ID_EMPRESA,ID_CLIENTE,FECHA_ALTA,FECHA_VENCIMIENTO)
	VALUES (@numeroFactura, 
			@idEmpresa, 
			(SELECT ID_CLIENTE FROM CLIENTES WHERE DNI = @dniCliente), 
			@fechaAlta,
			@fechaVencimiento)
END
GO

CREATE TYPE POLACA_INVERSA.TABLA_ITEMS_FACTURA AS TABLE(
    cantidad INT,
	monto FLOAT
)
GO

CREATE PROC POLACA_INVERSA.DETALLE_FACTURA_NUEVO(	@idFactura NUMERIC(18,0),
													@total NUMERIC(18,2),
													@items TABLA_ITEMS_FACTURA READONLY)
AS
BEGIN
	
	UPDATE POLACA_INVERSA.FACTURAS SET TOTAL=@total WHERE ID_FACTURA=@idFactura
	
	DELETE FROM POLACA_INVERSA.ITEMS_FACTURAS WHERE ID_FACTURA=@idFactura
	
	INSERT POLACA_INVERSA.ITEMS_FACTURAS (ID_FACTURA,CANTIDAD,MONTO)
		SELECT @idFactura, cantidad, monto
		FROM @items
END
GO

CREATE PROC POLACA_INVERSA.FACTURA_UPDATE( @idFactura NUMERIC(18,0),
											@idEmpresa NUMERIC(18,0),
											@dniCliente NUMERIC(18,0),
											@fechaAlta DATE,
											@fechaVencimiento DATE)
AS
BEGIN
	UPDATE POLACA_INVERSA.FACTURAS SET 	ID_EMPRESA = @idEmpresa,
										ID_CLIENTE = (SELECT ID_CLIENTE FROM CLIENTES WHERE DNI = @dniCliente),
										FECHA_ALTA = @fechaAlta,
										FECHA_VENCIMIENTO = @fechaVencimiento
	WHERE ID_FACTURA = @idFactura
END
GO

CREATE PROC POLACA_INVERSA.SUCURSAL_UPDATE( @idSucursal INT,
											@nombre VARCHAR(250),
											@direccion VARCHAR(250),
											@codigoPostal NUMERIC(18,0),
											@habilitado BIT)
AS
BEGIN
	UPDATE POLACA_INVERSA.SUCURSALES SET 	NOMBRE = @nombre,
												DIRECCION = @direccion,
												CODIGO_POSTAL = @codigoPostal,
												ESTADO_SUCURSAL = @habilitado
	WHERE ID_SUCURSAL = @idSucursal
END
GO

CREATE PROC POLACA_INVERSA.SUCURSAL_NUEVO(	
											@nombre VARCHAR(250),
											@direccion VARCHAR(250),
											@codigoPostal NUMERIC(18,0),
											@habilitado BIT)
AS
BEGIN
		INSERT INTO POLACA_INVERSA.SUCURSALES (NOMBRE,DIRECCION,CODIGO_POSTAL,ESTADO_SUCURSAL)
		VALUES (@nombre, @direccion, @codigoPostal, @habilitado)
END
GO

CREATE PROC POLACA_INVERSA.INHABILITAR_SUCURSAL(@id int)
AS
BEGIN
		UPDATE POLACA_INVERSA.SUCURSALES SET ESTADO_SUCURSAL=0 WHERE ID_SUCURSAL=@id
END
GO

CREATE PROC POLACA_INVERSA.HABILITAR_SUCURSAL(@id int)
AS
BEGIN
		UPDATE POLACA_INVERSA.SUCURSALES SET ESTADO_SUCURSAL=1 WHERE ID_SUCURSAL=@id
END
GO

-- Fin de Procedimientos

/* -- MIGRACION -- */

/*Para ejecutar las procedures una vez creadas, ejecutar: [POLACA_INVERSA].NombreProcedure */

--CLIENTES
CREATE PROCEDURE [POLACA_INVERSA].MigrarClientes
AS
BEGIN

	INSERT INTO [POLACA_INVERSA].CLIENTES(NOMBRE, APELLIDO, DNI, MAIL, DIRECCION, CODIGO_POSTAL, FECHA_NACIMIENTO)
	SELECT DISTINCT "Cliente-Nombre", "Cliente-Apellido", "Cliente-Dni", Cliente_Mail, Cliente_Direccion, Cliente_Codigo_Postal, "Cliente-Fecha_Nac"
	FROM gd_esquema.Maestra

END;
GO

--RUBROS
CREATE PROCEDURE [POLACA_INVERSA].MigrarRubros
AS
BEGIN
	
	INSERT INTO [POLACA_INVERSA].RUBRO(ID_RUBRO,DETALLE)
	SELECT DISTINCT Empresa_Rubro,'Nombre Empresa'
	FROM gd_esquema.Maestra

END;
GO

--EMPRESAS
CREATE PROCEDURE [POLACA_INVERSA].MigrarEmpresas
AS
BEGIN

	INSERT INTO [POLACA_INVERSA].EMPRESAS(CUIT, ID_RUBRO, NOMBRE, DIRECCION)
	SELECT DISTINCT REPLACE (Empresa_Cuit,'-',''), Empresa_Rubro ,Empresa_Nombre, Empresa_Direccion
	FROM gd_esquema.Maestra
	
END;
GO

--FACTURAS

CREATE PROCEDURE [POLACA_INVERSA].MigrarFactura
AS
BEGIN

	--SET IDENTITY_INSERT POLACA_INVERSA.FACTURAS ON

	INSERT POLACA_INVERSA.FACTURAS(ID_FACTURA, ID_EMPRESA, ID_CLIENTE, FECHA_ALTA, FECHA_VENCIMIENTO, TOTAL)
	SELECT DISTINCT Nro_Factura, e.ID_EMPRESA, c.ID_CLIENTE, Factura_Fecha, Factura_Fecha_Vencimiento, Factura_total
	FROM gd_esquema.Maestra m
		JOIN POLACA_INVERSA.EMPRESAS e ON (SELECT REPLACE (m.Empresa_Cuit,'-','')) = e.CUIT
		JOIN POLACA_INVERSA.CLIENTES c ON m.[Cliente-Dni] = c.DNI
	WHERE Nro_Factura IS NOT NULL
	GROUP BY Nro_Factura, e.ID_EMPRESA, c.ID_CLIENTE, Factura_Fecha, Factura_Fecha_Vencimiento, Factura_total

	--SET IDENTITY_INSERT POLACA_INVERSA.FACTURAS OFF
END;
GO

--Sucursales

CREATE PROCEDURE [POLACA_INVERSA].MigrarSucursales
AS
BEGIN
	INSERT INTO [POLACA_INVERSA].SUCURSALES (CODIGO_POSTAL,NOMBRE,DIRECCION,ESTADO_SUCURSAL) 
	SELECT DISTINCT Sucursal_Codigo_Postal,Sucursal_Nombre, Sucursal_Dirección,1 
	FROM [gd_esquema].[Maestra] where Sucursal_Codigo_Postal is not null
	
	--Se agrega Sucursal adicional
	INSERT INTO [POLACA_INVERSA].SUCURSALES 
	VALUES ('Sucursal Lanus','Hipolito Yrigoyen 3500',1824,1)
	
	--Se agrega relacion Usuario Admin Sucursales
	INSERT INTO POLACA_INVERSA.SUCURSAL_USUARIO (ID_USUARIO, ID_SUCURSAL) 
	VALUES (1,1)
	
	INSERT INTO POLACA_INVERSA.SUCURSAL_USUARIO (ID_USUARIO, ID_SUCURSAL) 
	VALUES (1,2)
END;
GO

--ITEM FACTURAS
CREATE PROCEDURE [POLACA_INVERSA].MigrarItemFactura
AS
BEGIN
	INSERT POLACA_INVERSA.ITEMS_FACTURAS (ID_FACTURA,CANTIDAD,MONTO)
	SELECT DISTINCT f.ID_FACTURA , m.ItemFactura_Cantidad, m.ItemFactura_Monto
	FROM POLACA_INVERSA.FACTURAS f
		JOIN gd_esquema.Maestra m ON f.ID_FACTURA = m.Nro_Factura
END;
GO

--ITEMS PAGOS e ITEMS PAGOS
/*CREATE PROCEDURE [POLACA_INVERSA].MigrarIPagos
AS
BEGIN
	DECLARE cPagos CURSOR FOR SELECT DISTINCT [Nro_Factura],[Pago_nro],[Pago_Fecha],[Total],[FormaPagoDescripcion],Sucursal_Codigo_Postal from gd_esquema.Maestra where Pago_nro IS NOT NULL
	OPEN cPagos
	FETCH NEXT FROM cPagos INTO @fact_num,@pago_numero,@pago_fecha,@pago_total,@pago_medio,@suc_cod_post
		WHILE @@FETCH_STATUS =0
		BEGIN
			INSERT INTO [POLACA_INVERSA].PAGOS (ID_PAGO, FECHA_PAGO, TOTAL_PAGO, MEDIO_PAGO, ID_SUCURSAL)
		END
END;
GO
*/
--Usuario Administrador

INSERT INTO POLACA_INVERSA.USUARIOS (USERNAME,PASSWORD,HABILITADO,INTENTOS)
	VALUES ('admin', HASHBYTES('SHA2_256', 'w23e'), 1, 0)
	
--Rol

INSERT POLACA_INVERSA.ROLES (nombre_rol, habilitado)
VALUES	('Administrador', 1),
		('Cobrador', 1)
		
--ACCESOS
INSERT POLACA_INVERSA.ACCESOS (nombre)
VALUES	('ABM de Rol'),
		('ABM de Cliente'),
		('ABM de Empresa'),
		('ABM de Factura'),
		('ABM de Sucursal'),
		('Registro de Pago'),
		('Fegistro de Rendicion'),
		('Listado Estadistico')

--Accesos x Rol
INSERT POLACA_INVERSA.ROL_ACCESOS (id_rol, id_acceso)
	VALUES (1, 1), (1,2), (1,3),(1,4),(1,5)

-- Rol_X_Usuario

INSERT POLACA_INVERSA.ROL_USUARIO (id_usuario, id_rol)
VALUES (1,1)

EXEC [POLACA_INVERSA].MigrarClientes
go

EXEC [POLACA_INVERSA].MigrarRubros
go

EXEC [POLACA_INVERSA].MigrarEmpresas
go

EXEC [POLACA_INVERSA].MigrarFactura
go

EXEC [POLACA_INVERSA].MigrarItemFactura
go

EXEC [POLACA_INVERSA].MigrarSucursales
go